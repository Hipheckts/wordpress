#!/usr/bin/env node

var fs     = require('fs');
var path   = require('path');
var util   = require('util');
var semver = require('semver');
var latest = require('../lib/github-latest');

var cwd    = process.cwd();
var from   = path.join(cwd, 'bower_components', 'wordpress');
var to     = path.join(cwd, 'web', 'wp');
var bower  = path.join(cwd, 'bower_components', 'evolution-wordpress', 'bower.json');
var notice = path.join(cwd, 'web', 'wp-content', 'mu-plugins', 'evo-update.php');

console.log('Evolution WordPress - Bower `postinstall` Script\n');

// Ensure `bower_components/wordpress` has been installed
if (!fs.existsSync(from)) {
  throw new Error(util.format('WordPress has not been installed to `%s`', from));
}

var toThemeDir = path.join(cwd, 'web', 'wp-content', 'themes');

if (!fs.existsSync(toThemeDir)) {
  var parts           = path.relative(cwd, toThemeDir).split(path.sep);
  var toThemePartDir  = cwd;

  while (parts.length) {
    toThemePartDir = path.join(toThemePartDir, parts.shift());

    console.info('Creating `%s`...', toThemePartDir);
    fs.mkdirSync(toThemePartDir);
  }
}

var fromThemeDir  = path.join(from, 'wp-content', 'themes');
var latestTheme   = null;
var themeExists   = function (parents, name) {
  var exists = false;
  parents.forEach (function (directory) {
    if (fs.existsSync( path.join(directory, name) )) {
      exists = true;
    }
  });
  return exists;
};
var words = function (num) {
  var ones  = ['','one','two','three','four','five','six','seven','eight','nine'];
  var tens  = ['','','twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety'];
  var teens = ['ten','eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen','eighteen','nineteen'];

  if (num == 0) return 'zero';
  else if (num < 10) return ones[num];
  else if (num >= 10 && num < 20) return teens[ num - 10 ];
  else {
    return tens[ Math.floor(num/10) ] + ones[ num % 10 ];
  }
}

for (var testYear = new Date().getFullYear(); testYear > 2009; testYear--) {
  var testName = words(testYear.toString().substr(0,2))
               + words(testYear.toString().substr(2,2))
  ;

  if (themeExists([toThemeDir,fromThemeDir], testName)) {
    latestTheme = testName;
    break;
  }
  else {
    console.log('No theme ' + testName);
  }
}

if (latestTheme === null) {
  if (themeExists([fromThemeDir], 'default')) {
    latestTheme = 'default';
  }
  else {
    throw new Error(util.format('Could not find WordPress core theme in `%s`', fromThemeDir));
  }
}

if (themeExists([toThemeDir], latestTheme)) {
  console.log('Existing core theme ' + latestTheme);
}
else {
  console.log('Found theme ' + latestTheme);

  var fromTheme = path.join(fromThemeDir, latestTheme);
  var toTheme   = path.join(toThemeDir, latestTheme);

  console.log('Moving theme `%s` to `%s`...', path.relative(cwd, fromTheme), path.relative(cwd, toTheme));
  fs.renameSync(fromTheme, toTheme);
}

// Remove existing `web/wp` folder
if (fs.existsSync(to)) {
  console.info('Removing `%s`...', to);

  var removeDir = function(dir) {
    var nodes = fs.readdirSync(dir).map(function(node) {
      return path.join(dir, node);
    });

    nodes.forEach(function(node) {
      var stats = fs.lstatSync(node);

      if (stats.isDirectory()) {
        removeDir(node);
      } else {
        fs.unlinkSync(node);
      }
    });

    fs.rmdirSync(dir);
  };

  removeDir(to);
}

console.info('Renaming `%s` to `%s`...', path.relative(cwd, from), path.relative(cwd, to));
fs.renameSync(from, to);

// add wp admin notices, if newer minor version
var bowerVersion  = JSON.parse(fs.readFileSync(bower)).version;
var latestVersion = latest('evolution', 'wordpress');

console.info('Comparing latest `%s` to current `%s`...', latestVersion, bowerVersion);

var bowerSemver   = semver.SemVer(bowerVersion);
var latestSemver  = semver.SemVer(latestVersion);

if (!semver.satisfies(latestSemver, util.format('%s.%s.x', bowerSemver.major, bowerSemver.minor))) {
  console.info('Adding wp-admin notice for `%s`...', latestVersion);

  var pluginContent = "<?php\n\n"
    +"add_action('admin_notices', 'evo_update_vSLUGVER');\n\n"
    +"function evo_update_vSLUGVER() {\n"
    +"  global $current_user;\n"
    +"  if ( current_user_can('install_plugins') ) {\n"
    +"    if ( ! get_user_meta($current_user->ID, 'evo_update_vSLUGVER_ignore_notice') ) {\n"
    +"      echo '<div class=\"update-nag\"><p>';\n"
    +"      printf(\n"
    +"        __('Evolution has <a href=\"%1$s\" target=\"_blank\">a new minor version</a>! To get the latest features and fixes, please <a href=\"%2$s\" target=\"_blank\">regenerate your site</a>. | <a href=\"%3$s\">Dismiss</a>'),\n"
    +"        'https://github.com/evolution/wordpress/blob/master/CHANGELOG.md#vRAWVER',\n"
    +"        'https://github.com/evolution/wordpress/blob/master/docs/TUTORIAL-UPGRADE.md',\n"
    +"        '?evo_update_vSLUGVER_ignore=0'\n"
    +"      );\n"
    +"      echo '</p></div>';\n"
    +"    }\n"
    +"  }\n"
    +"}\n\n"
    +"add_action('admin_init', 'evo_update_vSLUGVER_ignore');\n\n"
    +"function evo_update_vSLUGVER_ignore() {\n"
    +"  global $current_user;\n"
    +"  if ( current_user_can('install_plugins') ) {\n"
    +"    if ( isset($_GET['evo_update_vSLUGVER_ignore']) && '0' == $_GET['evo_update_vSLUGVER_ignore'] ) {\n"
    +"      add_user_meta($current_user->ID, 'evo_update_vSLUGVER_ignore_notice', 'true', true);\n"
    +"    }\n"
    +"  }\n"
    +"}\n"
  ;

  fs.writeFileSync(notice,
    pluginContent
      .replace(/RAWVER/g, latestSemver.toString())
      .replace(/SLUGVER/g, latestSemver.toString().replace(/[.]/g, '_')),
    {flag: 'w',mode: 0755}
  );
}
else if (fs.existsSync(notice)) {
  fs.unlinkSync(notice);
}

console.log('Done!');
